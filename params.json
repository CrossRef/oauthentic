{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# oauthentic\r\n\r\nLightweight [OAuth 2](http://tools.ietf.org/html/draft-ietf-oauth-v2-31) client library for Clojure.\r\n\r\nThis library only handles the authorization aspects of OAuth 2.\r\n\r\nWe recommend using [clj-http](https://github.com/dakrone/clj-http) for performing actual authenticated requests once you have a token.\r\n\r\n[![Build Status](https://secure.travis-ci.org/pelle/oauthentic.png)](http://travis-ci.org/pelle/oauthentic)\r\n\r\n## Usage\r\n\r\nAdd the following to your project.clj's dependencies section:\r\n\r\n```clojure\r\n[oauthentic \"1.0.0\"]\r\n```\r\n\r\nImport the library:\r\n\r\n```clojure\r\n(use 'oauthentic.core)\r\n```\r\n\r\n### Obtain authorization\r\n\r\nOAuth 2 will in most cases require you to send your user to an authorization url.\r\n\r\nIn almost all cases you will want to use the [Authorization Code Flow](http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.1) to obtain authorization and a token.\r\n\r\nThis uses a 2 step approach:\r\n\r\n1. Redirect user to services authorization url\r\n2. User is redirected back to your site with an authorization code, which you exchange for a token.\r\n\r\nTo obtain authorization you need the following:\r\n\r\n- client id (get this from the provider)\r\n- the services authorization url (get this from the provider)\r\n- redirect-uri A URL for an endpoint on your site that handles the 2nd phase above\r\n\r\n### FaceBook\r\n\r\n```clojure\r\n=> (build-authorization-url \"https://www.facebook.com/dialog/oauth\" { :client-id \"INSERT YOUR OWN ID\" :redirect-uri \"http://yoursite.com/oauth/endpoint\" })\r\n\"https://www.facebook.com/dialog/oauth?redirect_uri=http%253A%252F%252Fyoursite.com%252Foauth%252Fendpoint&response_type=code&client_id=INSERT+YOUR+OWN+ID\"\r\n```\r\n\r\n### GitHub\r\n\r\n```clojure\r\n=> (build-authorization-url \"https://github.com/login/oauth/authorize\" { :client-id \"INSERT YOUR OWN ID\" :redirect-uri \"http://yoursite.com/oauth/endpoint\" })\r\n\"https://github.com/login/oauth/authorize?redirect_uri=http%253A%252F%252Fyoursite.com%252Foauth%252Fendpoint&response_type=code&client_id=INSERT+YOUR+OWN+ID\"\r\n```\r\n\r\nYou can also call it with the first parameter being a map containing information about the server. This map should contain the following keys:\r\n\r\n- :authorization-url\r\n- :client-id\r\n\r\nYou still pass the request specific parameters such as redirect-uri and scope in the second map.\r\n\r\n```clojure\r\n=> (build-authorization-url { :authorization-url \"https://picomoney.com/oauth/authorize\"\r\n                              :client-id \"INSERT YOUR OWN ID\"}\r\n                            { :redirect-uri \"http://yoursite.com/oauth/endpoint\"})\r\n\"https://picomoney.com/oauth/authorize?redirect_uri=http%253A%252F%252Fyoursite.com%252Foauth%252Fendpoint&response_type=code&client_id=INSERT+YOUR+OWN+ID\"\r\n```\r\n\r\n\r\nYou can either redirect the user to to the URL or use it as a link.\r\n\r\nThe user will be redirected back to the URL you provided in redirect_uri with a code in the http query parameters or an error code. If you received the code proceed to...\r\n\r\n### Obtain Token with Authorization Code\r\n\r\nTo obtain a token you need the code you need the following parameters:\r\n\r\n- code (from above step)\r\n- redirect-uri (the same you used in the above step)\r\n- client_id (get this from the provider)\r\n- client_secret (get this from the provider)\r\n- token url (get this from the provider)\r\n\r\nIn theory the following examples should work:\r\n\r\n```clojure\r\n; Facebook\r\n=> (fetch-token \"https://graph.facebook.com/oauth/access_token\" { :client-id \"INSERT YOUR OWN ID\" :client-secret \"INSERT YOUR OWN SECRET\" :code code :redirect-uri \"INSERT YOUR ENDPOINT HERE\"})\r\n{:access-token \"TOKEN FROM SERVICE\" :token-type \"bearer\"}\r\n\r\n; GitHub\r\n=> (fetch-token \"https://github.com/login/oauth/access_token\" { :client-id \"INSERT YOUR OWN ID\" :client-secret \"INSERT YOUR OWN SECRET\" :code code :redirect-uri \"INSERT YOUR ENDPOINT HERE\"})\r\n{:access-token \"TOKEN FROM SERVICE\" :token-type \"bearer\"}\r\n```\r\n\r\nYou can also call it with the first parameter being a map containing information about the server. This map should contain the following keys:\r\n\r\n- :token-url\r\n- :client-id\r\n- :client-secret\r\n\r\nYou still need to pass request specific details in the second map, such as :code and :redirect-uri.\r\n\r\n```clojure\r\n=> (fetch-token { :token-url \"https://picomoney.com/oauth/token\"\r\n                  :client-id \"INSERT YOUR OWN ID\"\r\n                  :client-secret \"INSERT YOUR OWN SECRET\"}\r\n                { :code code :redirect-uri \"INSERT YOUR ENDPOINT HERE\"})\r\n{:access-token \"TOKEN FROM SERVICE\" :token-type \"bearer\"}\r\n```\r\n\r\nThe provider may also supply you with an optional :refresh-token. See next section.\r\n\r\n### Obtain Token with Refresh token\r\n\r\nSome providers issue refresh tokens together with a short term access token. See [Refresh Token](http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-6).\r\n\r\nOauthentic supports getting a fresh access token using the refresh token.\r\n\r\nTo obtain a new token you need the code you need the following parameters:\r\n\r\n- refresh-token (from above step)\r\n- client_id (get this from the provider)\r\n- client_secret (get this from the provider)\r\n- token url (get this from the provider)\r\n\r\n### Obtain Token with Client Credentials\r\n\r\nTo obtain a token for your own application you can skip the authorization flow completely and use this [method](http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4).\r\n\r\nYou need the following parameters:\r\n\r\n- :client-id (get this from the provider)\r\n- :client-secret (get this from the provider)\r\n- :token url (get this from the provider)\r\n\r\n### Obtain Token with Resource Owner Credentials\r\n\r\nTo obtain a token for your own application you can skip the authorization flow completely and use this [method](http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.3).\r\n\r\nYou need the following parameters:\r\n\r\n- :client-id (get this from the provider)\r\n- :client-secret (get this from the provider)\r\n- :token url (get this from the provider)\r\n- :username User's id\r\n- :password User's password\r\n\r\n## Service provider specifics\r\n\r\nIt is easy to customize both authorization and token requests for a specific provider. See [src/oauthentic/services/stripe.clj](https://github.com/pelle/oauthentic/blob/master/src/oauthentic/services/stripe.clj) on how to do this.\r\n\r\nUsing this you can present the authorization and token urls as well as customize aspects of the request, such as Stripe which uses a slightly different way of authenticating clients.\r\n\r\n```clojure\r\n(use 'oauthentic.services.stripe)\r\n(build-authorization-url :stripe { :client-id \"CLIENT\" :state \"ABCDEF\" :scope :read_write :redirect-uri \"http://test.com/callback\"})\r\n(fetch-token :stripe {  :client-id (:client-id \"CLIENT\")\r\n                        :client-secret \"SECRET\"\r\n                        :code \"CODE\"\r\n                        :scope :read_write\r\n                        :redirect-uri \"http://test.com/endpoint\" })\r\n```\r\n\r\nPlease submit services and I'll be happy to accept them.\r\n\r\n## Ring Handler\r\n\r\nThere is a Ring Handler for automatically handling the above flow in a similar manner to Ruby's OmniAuth.\r\n\r\nIt lives in oauthentic.ring and can be installed like this:\r\n\r\n```clojure\r\n(def fb-login-handler (oauthentic.ring/oauthentic-handler login-handler error-handler { :authorization-url \"https://github.com/login/oauth/authorize\"\r\n                                            :token-url \"https://github.com/login/oauth/access_token\"\r\n                                            :client-id \"INSERT YOUR OWN ID\"\r\n                                            :client-secret \"INSERT YOUR OWN SECRET\" })\r\n```\r\n\r\nInstall the handler in your routes however you like.\r\n\r\nLogin function is a ring handler function that is passed the request with the token as :oauthentic-token in the request.\r\n\r\nIt should knows how to correctly set the session verify user based on the user database etc. As it's a ring handler it should return a correct response.\r\n\r\nError handler is another ring handler that is called if an error is returned from the service.\r\n\r\nDefault dumb implementations are available and can be used by leaving them out.\r\n\r\n## License\r\n\r\nCopyright (C) 2012 [Pelle Braendgaard](http://stakeventures.com) and [PicoMoney](http://picomoney.com)\r\n\r\nDistributed under the Eclipse Public License, the same as Clojure.\r\n","name":"Oauthentic","google":"","tagline":"Simple OAuth 2 client library for Clojure"}